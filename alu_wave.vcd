$date
	Wed Oct  3 21:56:37 2018
$end
$version
	Icarus Verilog
$end
$timescale
	1ps
$end
$scope module testALU $end
$scope module alu $end
$var wire 1 ! SLTval $end
$var wire 1 " carryout $end
$var wire 3 # command [2:0] $end
$var wire 1 $ isSLT $end
$var wire 1 % isSLTinv $end
$var wire 1 & isSubtract $end
$var wire 32 ' operandA [31:0] $end
$var wire 32 ( operandB [31:0] $end
$var wire 1 ) overflowInv $end
$var wire 1 * s2inv $end
$var wire 1 + zero $end
$var wire 32 , result [31:0] $end
$var wire 1 - overflow $end
$var wire 32 . initialResult [31:0] $end
$var wire 33 / carryOut [32:0] $end
$scope begin genblk1[0] $end
$scope module aluBitSlice $end
$var wire 1 0 a $end
$var wire 1 1 andRes $end
$var wire 1 2 b $end
$var wire 1 3 carryIn $end
$var wire 1 4 initialResult $end
$var wire 1 5 isAdd $end
$var wire 1 6 isAnd $end
$var wire 1 7 isNand $end
$var wire 1 8 isNor $end
$var wire 1 9 isOr $end
$var wire 1 : isSLT $end
$var wire 1 ; isSub $end
$var wire 1 & isSubtract $end
$var wire 1 < isXor $end
$var wire 1 = nandRes $end
$var wire 1 > norRes $end
$var wire 1 ? orRes $end
$var wire 1 @ s0 $end
$var wire 1 A s0inv $end
$var wire 1 B s1 $end
$var wire 1 C s1inv $end
$var wire 1 D s2 $end
$var wire 1 E s2inv $end
$var wire 1 F xorRes $end
$var wire 1 G carryOut $end
$var wire 1 H addSub $end
$scope module adder $end
$var wire 1 I AandB $end
$var wire 1 J BxorSub $end
$var wire 1 0 a $end
$var wire 1 2 b $end
$var wire 1 3 carryin $end
$var wire 1 G carryout $end
$var wire 1 & isSubtract $end
$var wire 1 H res $end
$var wire 1 K xAorB $end
$var wire 1 L xAorBandCin $end
$upscope $end
$upscope $end
$upscope $end
$scope begin genblk1[1] $end
$scope module aluBitSlice $end
$var wire 1 M a $end
$var wire 1 N andRes $end
$var wire 1 O b $end
$var wire 1 P carryIn $end
$var wire 1 Q initialResult $end
$var wire 1 R isAdd $end
$var wire 1 S isAnd $end
$var wire 1 T isNand $end
$var wire 1 U isNor $end
$var wire 1 V isOr $end
$var wire 1 W isSLT $end
$var wire 1 X isSub $end
$var wire 1 & isSubtract $end
$var wire 1 Y isXor $end
$var wire 1 Z nandRes $end
$var wire 1 [ norRes $end
$var wire 1 \ orRes $end
$var wire 1 ] s0 $end
$var wire 1 ^ s0inv $end
$var wire 1 _ s1 $end
$var wire 1 ` s1inv $end
$var wire 1 a s2 $end
$var wire 1 b s2inv $end
$var wire 1 c xorRes $end
$var wire 1 d carryOut $end
$var wire 1 e addSub $end
$scope module adder $end
$var wire 1 f AandB $end
$var wire 1 g BxorSub $end
$var wire 1 M a $end
$var wire 1 O b $end
$var wire 1 P carryin $end
$var wire 1 d carryout $end
$var wire 1 & isSubtract $end
$var wire 1 e res $end
$var wire 1 h xAorB $end
$var wire 1 i xAorBandCin $end
$upscope $end
$upscope $end
$upscope $end
$scope begin genblk1[2] $end
$scope module aluBitSlice $end
$var wire 1 j a $end
$var wire 1 k andRes $end
$var wire 1 l b $end
$var wire 1 m carryIn $end
$var wire 1 n initialResult $end
$var wire 1 o isAdd $end
$var wire 1 p isAnd $end
$var wire 1 q isNand $end
$var wire 1 r isNor $end
$var wire 1 s isOr $end
$var wire 1 t isSLT $end
$var wire 1 u isSub $end
$var wire 1 & isSubtract $end
$var wire 1 v isXor $end
$var wire 1 w nandRes $end
$var wire 1 x norRes $end
$var wire 1 y orRes $end
$var wire 1 z s0 $end
$var wire 1 { s0inv $end
$var wire 1 | s1 $end
$var wire 1 } s1inv $end
$var wire 1 ~ s2 $end
$var wire 1 !" s2inv $end
$var wire 1 "" xorRes $end
$var wire 1 #" carryOut $end
$var wire 1 $" addSub $end
$scope module adder $end
$var wire 1 %" AandB $end
$var wire 1 &" BxorSub $end
$var wire 1 j a $end
$var wire 1 l b $end
$var wire 1 m carryin $end
$var wire 1 #" carryout $end
$var wire 1 & isSubtract $end
$var wire 1 $" res $end
$var wire 1 '" xAorB $end
$var wire 1 (" xAorBandCin $end
$upscope $end
$upscope $end
$upscope $end
$scope begin genblk1[3] $end
$scope module aluBitSlice $end
$var wire 1 )" a $end
$var wire 1 *" andRes $end
$var wire 1 +" b $end
$var wire 1 ," carryIn $end
$var wire 1 -" initialResult $end
$var wire 1 ." isAdd $end
$var wire 1 /" isAnd $end
$var wire 1 0" isNand $end
$var wire 1 1" isNor $end
$var wire 1 2" isOr $end
$var wire 1 3" isSLT $end
$var wire 1 4" isSub $end
$var wire 1 & isSubtract $end
$var wire 1 5" isXor $end
$var wire 1 6" nandRes $end
$var wire 1 7" norRes $end
$var wire 1 8" orRes $end
$var wire 1 9" s0 $end
$var wire 1 :" s0inv $end
$var wire 1 ;" s1 $end
$var wire 1 <" s1inv $end
$var wire 1 =" s2 $end
$var wire 1 >" s2inv $end
$var wire 1 ?" xorRes $end
$var wire 1 @" carryOut $end
$var wire 1 A" addSub $end
$scope module adder $end
$var wire 1 B" AandB $end
$var wire 1 C" BxorSub $end
$var wire 1 )" a $end
$var wire 1 +" b $end
$var wire 1 ," carryin $end
$var wire 1 @" carryout $end
$var wire 1 & isSubtract $end
$var wire 1 A" res $end
$var wire 1 D" xAorB $end
$var wire 1 E" xAorBandCin $end
$upscope $end
$upscope $end
$upscope $end
$scope begin genblk1[4] $end
$scope module aluBitSlice $end
$var wire 1 F" a $end
$var wire 1 G" andRes $end
$var wire 1 H" b $end
$var wire 1 I" carryIn $end
$var wire 1 J" initialResult $end
$var wire 1 K" isAdd $end
$var wire 1 L" isAnd $end
$var wire 1 M" isNand $end
$var wire 1 N" isNor $end
$var wire 1 O" isOr $end
$var wire 1 P" isSLT $end
$var wire 1 Q" isSub $end
$var wire 1 & isSubtract $end
$var wire 1 R" isXor $end
$var wire 1 S" nandRes $end
$var wire 1 T" norRes $end
$var wire 1 U" orRes $end
$var wire 1 V" s0 $end
$var wire 1 W" s0inv $end
$var wire 1 X" s1 $end
$var wire 1 Y" s1inv $end
$var wire 1 Z" s2 $end
$var wire 1 [" s2inv $end
$var wire 1 \" xorRes $end
$var wire 1 ]" carryOut $end
$var wire 1 ^" addSub $end
$scope module adder $end
$var wire 1 _" AandB $end
$var wire 1 `" BxorSub $end
$var wire 1 F" a $end
$var wire 1 H" b $end
$var wire 1 I" carryin $end
$var wire 1 ]" carryout $end
$var wire 1 & isSubtract $end
$var wire 1 ^" res $end
$var wire 1 a" xAorB $end
$var wire 1 b" xAorBandCin $end
$upscope $end
$upscope $end
$upscope $end
$scope begin genblk1[5] $end
$scope module aluBitSlice $end
$var wire 1 c" a $end
$var wire 1 d" andRes $end
$var wire 1 e" b $end
$var wire 1 f" carryIn $end
$var wire 1 g" initialResult $end
$var wire 1 h" isAdd $end
$var wire 1 i" isAnd $end
$var wire 1 j" isNand $end
$var wire 1 k" isNor $end
$var wire 1 l" isOr $end
$var wire 1 m" isSLT $end
$var wire 1 n" isSub $end
$var wire 1 & isSubtract $end
$var wire 1 o" isXor $end
$var wire 1 p" nandRes $end
$var wire 1 q" norRes $end
$var wire 1 r" orRes $end
$var wire 1 s" s0 $end
$var wire 1 t" s0inv $end
$var wire 1 u" s1 $end
$var wire 1 v" s1inv $end
$var wire 1 w" s2 $end
$var wire 1 x" s2inv $end
$var wire 1 y" xorRes $end
$var wire 1 z" carryOut $end
$var wire 1 {" addSub $end
$scope module adder $end
$var wire 1 |" AandB $end
$var wire 1 }" BxorSub $end
$var wire 1 c" a $end
$var wire 1 e" b $end
$var wire 1 f" carryin $end
$var wire 1 z" carryout $end
$var wire 1 & isSubtract $end
$var wire 1 {" res $end
$var wire 1 ~" xAorB $end
$var wire 1 !# xAorBandCin $end
$upscope $end
$upscope $end
$upscope $end
$scope begin genblk1[6] $end
$scope module aluBitSlice $end
$var wire 1 "# a $end
$var wire 1 ## andRes $end
$var wire 1 $# b $end
$var wire 1 %# carryIn $end
$var wire 1 &# initialResult $end
$var wire 1 '# isAdd $end
$var wire 1 (# isAnd $end
$var wire 1 )# isNand $end
$var wire 1 *# isNor $end
$var wire 1 +# isOr $end
$var wire 1 ,# isSLT $end
$var wire 1 -# isSub $end
$var wire 1 & isSubtract $end
$var wire 1 .# isXor $end
$var wire 1 /# nandRes $end
$var wire 1 0# norRes $end
$var wire 1 1# orRes $end
$var wire 1 2# s0 $end
$var wire 1 3# s0inv $end
$var wire 1 4# s1 $end
$var wire 1 5# s1inv $end
$var wire 1 6# s2 $end
$var wire 1 7# s2inv $end
$var wire 1 8# xorRes $end
$var wire 1 9# carryOut $end
$var wire 1 :# addSub $end
$scope module adder $end
$var wire 1 ;# AandB $end
$var wire 1 <# BxorSub $end
$var wire 1 "# a $end
$var wire 1 $# b $end
$var wire 1 %# carryin $end
$var wire 1 9# carryout $end
$var wire 1 & isSubtract $end
$var wire 1 :# res $end
$var wire 1 =# xAorB $end
$var wire 1 ># xAorBandCin $end
$upscope $end
$upscope $end
$upscope $end
$scope begin genblk1[7] $end
$scope module aluBitSlice $end
$var wire 1 ?# a $end
$var wire 1 @# andRes $end
$var wire 1 A# b $end
$var wire 1 B# carryIn $end
$var wire 1 C# initialResult $end
$var wire 1 D# isAdd $end
$var wire 1 E# isAnd $end
$var wire 1 F# isNand $end
$var wire 1 G# isNor $end
$var wire 1 H# isOr $end
$var wire 1 I# isSLT $end
$var wire 1 J# isSub $end
$var wire 1 & isSubtract $end
$var wire 1 K# isXor $end
$var wire 1 L# nandRes $end
$var wire 1 M# norRes $end
$var wire 1 N# orRes $end
$var wire 1 O# s0 $end
$var wire 1 P# s0inv $end
$var wire 1 Q# s1 $end
$var wire 1 R# s1inv $end
$var wire 1 S# s2 $end
$var wire 1 T# s2inv $end
$var wire 1 U# xorRes $end
$var wire 1 V# carryOut $end
$var wire 1 W# addSub $end
$scope module adder $end
$var wire 1 X# AandB $end
$var wire 1 Y# BxorSub $end
$var wire 1 ?# a $end
$var wire 1 A# b $end
$var wire 1 B# carryin $end
$var wire 1 V# carryout $end
$var wire 1 & isSubtract $end
$var wire 1 W# res $end
$var wire 1 Z# xAorB $end
$var wire 1 [# xAorBandCin $end
$upscope $end
$upscope $end
$upscope $end
$scope begin genblk1[8] $end
$scope module aluBitSlice $end
$var wire 1 \# a $end
$var wire 1 ]# andRes $end
$var wire 1 ^# b $end
$var wire 1 _# carryIn $end
$var wire 1 `# initialResult $end
$var wire 1 a# isAdd $end
$var wire 1 b# isAnd $end
$var wire 1 c# isNand $end
$var wire 1 d# isNor $end
$var wire 1 e# isOr $end
$var wire 1 f# isSLT $end
$var wire 1 g# isSub $end
$var wire 1 & isSubtract $end
$var wire 1 h# isXor $end
$var wire 1 i# nandRes $end
$var wire 1 j# norRes $end
$var wire 1 k# orRes $end
$var wire 1 l# s0 $end
$var wire 1 m# s0inv $end
$var wire 1 n# s1 $end
$var wire 1 o# s1inv $end
$var wire 1 p# s2 $end
$var wire 1 q# s2inv $end
$var wire 1 r# xorRes $end
$var wire 1 s# carryOut $end
$var wire 1 t# addSub $end
$scope module adder $end
$var wire 1 u# AandB $end
$var wire 1 v# BxorSub $end
$var wire 1 \# a $end
$var wire 1 ^# b $end
$var wire 1 _# carryin $end
$var wire 1 s# carryout $end
$var wire 1 & isSubtract $end
$var wire 1 t# res $end
$var wire 1 w# xAorB $end
$var wire 1 x# xAorBandCin $end
$upscope $end
$upscope $end
$upscope $end
$scope begin genblk1[9] $end
$scope module aluBitSlice $end
$var wire 1 y# a $end
$var wire 1 z# andRes $end
$var wire 1 {# b $end
$var wire 1 |# carryIn $end
$var wire 1 }# initialResult $end
$var wire 1 ~# isAdd $end
$var wire 1 !$ isAnd $end
$var wire 1 "$ isNand $end
$var wire 1 #$ isNor $end
$var wire 1 $$ isOr $end
$var wire 1 %$ isSLT $end
$var wire 1 &$ isSub $end
$var wire 1 & isSubtract $end
$var wire 1 '$ isXor $end
$var wire 1 ($ nandRes $end
$var wire 1 )$ norRes $end
$var wire 1 *$ orRes $end
$var wire 1 +$ s0 $end
$var wire 1 ,$ s0inv $end
$var wire 1 -$ s1 $end
$var wire 1 .$ s1inv $end
$var wire 1 /$ s2 $end
$var wire 1 0$ s2inv $end
$var wire 1 1$ xorRes $end
$var wire 1 2$ carryOut $end
$var wire 1 3$ addSub $end
$scope module adder $end
$var wire 1 4$ AandB $end
$var wire 1 5$ BxorSub $end
$var wire 1 y# a $end
$var wire 1 {# b $end
$var wire 1 |# carryin $end
$var wire 1 2$ carryout $end
$var wire 1 & isSubtract $end
$var wire 1 3$ res $end
$var wire 1 6$ xAorB $end
$var wire 1 7$ xAorBandCin $end
$upscope $end
$upscope $end
$upscope $end
$scope begin genblk1[10] $end
$scope module aluBitSlice $end
$var wire 1 8$ a $end
$var wire 1 9$ andRes $end
$var wire 1 :$ b $end
$var wire 1 ;$ carryIn $end
$var wire 1 <$ initialResult $end
$var wire 1 =$ isAdd $end
$var wire 1 >$ isAnd $end
$var wire 1 ?$ isNand $end
$var wire 1 @$ isNor $end
$var wire 1 A$ isOr $end
$var wire 1 B$ isSLT $end
$var wire 1 C$ isSub $end
$var wire 1 & isSubtract $end
$var wire 1 D$ isXor $end
$var wire 1 E$ nandRes $end
$var wire 1 F$ norRes $end
$var wire 1 G$ orRes $end
$var wire 1 H$ s0 $end
$var wire 1 I$ s0inv $end
$var wire 1 J$ s1 $end
$var wire 1 K$ s1inv $end
$var wire 1 L$ s2 $end
$var wire 1 M$ s2inv $end
$var wire 1 N$ xorRes $end
$var wire 1 O$ carryOut $end
$var wire 1 P$ addSub $end
$scope module adder $end
$var wire 1 Q$ AandB $end
$var wire 1 R$ BxorSub $end
$var wire 1 8$ a $end
$var wire 1 :$ b $end
$var wire 1 ;$ carryin $end
$var wire 1 O$ carryout $end
$var wire 1 & isSubtract $end
$var wire 1 P$ res $end
$var wire 1 S$ xAorB $end
$var wire 1 T$ xAorBandCin $end
$upscope $end
$upscope $end
$upscope $end
$scope begin genblk1[11] $end
$scope module aluBitSlice $end
$var wire 1 U$ a $end
$var wire 1 V$ andRes $end
$var wire 1 W$ b $end
$var wire 1 X$ carryIn $end
$var wire 1 Y$ initialResult $end
$var wire 1 Z$ isAdd $end
$var wire 1 [$ isAnd $end
$var wire 1 \$ isNand $end
$var wire 1 ]$ isNor $end
$var wire 1 ^$ isOr $end
$var wire 1 _$ isSLT $end
$var wire 1 `$ isSub $end
$var wire 1 & isSubtract $end
$var wire 1 a$ isXor $end
$var wire 1 b$ nandRes $end
$var wire 1 c$ norRes $end
$var wire 1 d$ orRes $end
$var wire 1 e$ s0 $end
$var wire 1 f$ s0inv $end
$var wire 1 g$ s1 $end
$var wire 1 h$ s1inv $end
$var wire 1 i$ s2 $end
$var wire 1 j$ s2inv $end
$var wire 1 k$ xorRes $end
$var wire 1 l$ carryOut $end
$var wire 1 m$ addSub $end
$scope module adder $end
$var wire 1 n$ AandB $end
$var wire 1 o$ BxorSub $end
$var wire 1 U$ a $end
$var wire 1 W$ b $end
$var wire 1 X$ carryin $end
$var wire 1 l$ carryout $end
$var wire 1 & isSubtract $end
$var wire 1 m$ res $end
$var wire 1 p$ xAorB $end
$var wire 1 q$ xAorBandCin $end
$upscope $end
$upscope $end
$upscope $end
$scope begin genblk1[12] $end
$scope module aluBitSlice $end
$var wire 1 r$ a $end
$var wire 1 s$ andRes $end
$var wire 1 t$ b $end
$var wire 1 u$ carryIn $end
$var wire 1 v$ initialResult $end
$var wire 1 w$ isAdd $end
$var wire 1 x$ isAnd $end
$var wire 1 y$ isNand $end
$var wire 1 z$ isNor $end
$var wire 1 {$ isOr $end
$var wire 1 |$ isSLT $end
$var wire 1 }$ isSub $end
$var wire 1 & isSubtract $end
$var wire 1 ~$ isXor $end
$var wire 1 !% nandRes $end
$var wire 1 "% norRes $end
$var wire 1 #% orRes $end
$var wire 1 $% s0 $end
$var wire 1 %% s0inv $end
$var wire 1 &% s1 $end
$var wire 1 '% s1inv $end
$var wire 1 (% s2 $end
$var wire 1 )% s2inv $end
$var wire 1 *% xorRes $end
$var wire 1 +% carryOut $end
$var wire 1 ,% addSub $end
$scope module adder $end
$var wire 1 -% AandB $end
$var wire 1 .% BxorSub $end
$var wire 1 r$ a $end
$var wire 1 t$ b $end
$var wire 1 u$ carryin $end
$var wire 1 +% carryout $end
$var wire 1 & isSubtract $end
$var wire 1 ,% res $end
$var wire 1 /% xAorB $end
$var wire 1 0% xAorBandCin $end
$upscope $end
$upscope $end
$upscope $end
$scope begin genblk1[13] $end
$scope module aluBitSlice $end
$var wire 1 1% a $end
$var wire 1 2% andRes $end
$var wire 1 3% b $end
$var wire 1 4% carryIn $end
$var wire 1 5% initialResult $end
$var wire 1 6% isAdd $end
$var wire 1 7% isAnd $end
$var wire 1 8% isNand $end
$var wire 1 9% isNor $end
$var wire 1 :% isOr $end
$var wire 1 ;% isSLT $end
$var wire 1 <% isSub $end
$var wire 1 & isSubtract $end
$var wire 1 =% isXor $end
$var wire 1 >% nandRes $end
$var wire 1 ?% norRes $end
$var wire 1 @% orRes $end
$var wire 1 A% s0 $end
$var wire 1 B% s0inv $end
$var wire 1 C% s1 $end
$var wire 1 D% s1inv $end
$var wire 1 E% s2 $end
$var wire 1 F% s2inv $end
$var wire 1 G% xorRes $end
$var wire 1 H% carryOut $end
$var wire 1 I% addSub $end
$scope module adder $end
$var wire 1 J% AandB $end
$var wire 1 K% BxorSub $end
$var wire 1 1% a $end
$var wire 1 3% b $end
$var wire 1 4% carryin $end
$var wire 1 H% carryout $end
$var wire 1 & isSubtract $end
$var wire 1 I% res $end
$var wire 1 L% xAorB $end
$var wire 1 M% xAorBandCin $end
$upscope $end
$upscope $end
$upscope $end
$scope begin genblk1[14] $end
$scope module aluBitSlice $end
$var wire 1 N% a $end
$var wire 1 O% andRes $end
$var wire 1 P% b $end
$var wire 1 Q% carryIn $end
$var wire 1 R% initialResult $end
$var wire 1 S% isAdd $end
$var wire 1 T% isAnd $end
$var wire 1 U% isNand $end
$var wire 1 V% isNor $end
$var wire 1 W% isOr $end
$var wire 1 X% isSLT $end
$var wire 1 Y% isSub $end
$var wire 1 & isSubtract $end
$var wire 1 Z% isXor $end
$var wire 1 [% nandRes $end
$var wire 1 \% norRes $end
$var wire 1 ]% orRes $end
$var wire 1 ^% s0 $end
$var wire 1 _% s0inv $end
$var wire 1 `% s1 $end
$var wire 1 a% s1inv $end
$var wire 1 b% s2 $end
$var wire 1 c% s2inv $end
$var wire 1 d% xorRes $end
$var wire 1 e% carryOut $end
$var wire 1 f% addSub $end
$scope module adder $end
$var wire 1 g% AandB $end
$var wire 1 h% BxorSub $end
$var wire 1 N% a $end
$var wire 1 P% b $end
$var wire 1 Q% carryin $end
$var wire 1 e% carryout $end
$var wire 1 & isSubtract $end
$var wire 1 f% res $end
$var wire 1 i% xAorB $end
$var wire 1 j% xAorBandCin $end
$upscope $end
$upscope $end
$upscope $end
$scope begin genblk1[15] $end
$scope module aluBitSlice $end
$var wire 1 k% a $end
$var wire 1 l% andRes $end
$var wire 1 m% b $end
$var wire 1 n% carryIn $end
$var wire 1 o% initialResult $end
$var wire 1 p% isAdd $end
$var wire 1 q% isAnd $end
$var wire 1 r% isNand $end
$var wire 1 s% isNor $end
$var wire 1 t% isOr $end
$var wire 1 u% isSLT $end
$var wire 1 v% isSub $end
$var wire 1 & isSubtract $end
$var wire 1 w% isXor $end
$var wire 1 x% nandRes $end
$var wire 1 y% norRes $end
$var wire 1 z% orRes $end
$var wire 1 {% s0 $end
$var wire 1 |% s0inv $end
$var wire 1 }% s1 $end
$var wire 1 ~% s1inv $end
$var wire 1 !& s2 $end
$var wire 1 "& s2inv $end
$var wire 1 #& xorRes $end
$var wire 1 $& carryOut $end
$var wire 1 %& addSub $end
$scope module adder $end
$var wire 1 && AandB $end
$var wire 1 '& BxorSub $end
$var wire 1 k% a $end
$var wire 1 m% b $end
$var wire 1 n% carryin $end
$var wire 1 $& carryout $end
$var wire 1 & isSubtract $end
$var wire 1 %& res $end
$var wire 1 (& xAorB $end
$var wire 1 )& xAorBandCin $end
$upscope $end
$upscope $end
$upscope $end
$scope begin genblk1[16] $end
$scope module aluBitSlice $end
$var wire 1 *& a $end
$var wire 1 +& andRes $end
$var wire 1 ,& b $end
$var wire 1 -& carryIn $end
$var wire 1 .& initialResult $end
$var wire 1 /& isAdd $end
$var wire 1 0& isAnd $end
$var wire 1 1& isNand $end
$var wire 1 2& isNor $end
$var wire 1 3& isOr $end
$var wire 1 4& isSLT $end
$var wire 1 5& isSub $end
$var wire 1 & isSubtract $end
$var wire 1 6& isXor $end
$var wire 1 7& nandRes $end
$var wire 1 8& norRes $end
$var wire 1 9& orRes $end
$var wire 1 :& s0 $end
$var wire 1 ;& s0inv $end
$var wire 1 <& s1 $end
$var wire 1 =& s1inv $end
$var wire 1 >& s2 $end
$var wire 1 ?& s2inv $end
$var wire 1 @& xorRes $end
$var wire 1 A& carryOut $end
$var wire 1 B& addSub $end
$scope module adder $end
$var wire 1 C& AandB $end
$var wire 1 D& BxorSub $end
$var wire 1 *& a $end
$var wire 1 ,& b $end
$var wire 1 -& carryin $end
$var wire 1 A& carryout $end
$var wire 1 & isSubtract $end
$var wire 1 B& res $end
$var wire 1 E& xAorB $end
$var wire 1 F& xAorBandCin $end
$upscope $end
$upscope $end
$upscope $end
$scope begin genblk1[17] $end
$scope module aluBitSlice $end
$var wire 1 G& a $end
$var wire 1 H& andRes $end
$var wire 1 I& b $end
$var wire 1 J& carryIn $end
$var wire 1 K& initialResult $end
$var wire 1 L& isAdd $end
$var wire 1 M& isAnd $end
$var wire 1 N& isNand $end
$var wire 1 O& isNor $end
$var wire 1 P& isOr $end
$var wire 1 Q& isSLT $end
$var wire 1 R& isSub $end
$var wire 1 & isSubtract $end
$var wire 1 S& isXor $end
$var wire 1 T& nandRes $end
$var wire 1 U& norRes $end
$var wire 1 V& orRes $end
$var wire 1 W& s0 $end
$var wire 1 X& s0inv $end
$var wire 1 Y& s1 $end
$var wire 1 Z& s1inv $end
$var wire 1 [& s2 $end
$var wire 1 \& s2inv $end
$var wire 1 ]& xorRes $end
$var wire 1 ^& carryOut $end
$var wire 1 _& addSub $end
$scope module adder $end
$var wire 1 `& AandB $end
$var wire 1 a& BxorSub $end
$var wire 1 G& a $end
$var wire 1 I& b $end
$var wire 1 J& carryin $end
$var wire 1 ^& carryout $end
$var wire 1 & isSubtract $end
$var wire 1 _& res $end
$var wire 1 b& xAorB $end
$var wire 1 c& xAorBandCin $end
$upscope $end
$upscope $end
$upscope $end
$scope begin genblk1[18] $end
$scope module aluBitSlice $end
$var wire 1 d& a $end
$var wire 1 e& andRes $end
$var wire 1 f& b $end
$var wire 1 g& carryIn $end
$var wire 1 h& initialResult $end
$var wire 1 i& isAdd $end
$var wire 1 j& isAnd $end
$var wire 1 k& isNand $end
$var wire 1 l& isNor $end
$var wire 1 m& isOr $end
$var wire 1 n& isSLT $end
$var wire 1 o& isSub $end
$var wire 1 & isSubtract $end
$var wire 1 p& isXor $end
$var wire 1 q& nandRes $end
$var wire 1 r& norRes $end
$var wire 1 s& orRes $end
$var wire 1 t& s0 $end
$var wire 1 u& s0inv $end
$var wire 1 v& s1 $end
$var wire 1 w& s1inv $end
$var wire 1 x& s2 $end
$var wire 1 y& s2inv $end
$var wire 1 z& xorRes $end
$var wire 1 {& carryOut $end
$var wire 1 |& addSub $end
$scope module adder $end
$var wire 1 }& AandB $end
$var wire 1 ~& BxorSub $end
$var wire 1 d& a $end
$var wire 1 f& b $end
$var wire 1 g& carryin $end
$var wire 1 {& carryout $end
$var wire 1 & isSubtract $end
$var wire 1 |& res $end
$var wire 1 !' xAorB $end
$var wire 1 "' xAorBandCin $end
$upscope $end
$upscope $end
$upscope $end
$scope begin genblk1[19] $end
$scope module aluBitSlice $end
$var wire 1 #' a $end
$var wire 1 $' andRes $end
$var wire 1 %' b $end
$var wire 1 &' carryIn $end
$var wire 1 '' initialResult $end
$var wire 1 (' isAdd $end
$var wire 1 )' isAnd $end
$var wire 1 *' isNand $end
$var wire 1 +' isNor $end
$var wire 1 ,' isOr $end
$var wire 1 -' isSLT $end
$var wire 1 .' isSub $end
$var wire 1 & isSubtract $end
$var wire 1 /' isXor $end
$var wire 1 0' nandRes $end
$var wire 1 1' norRes $end
$var wire 1 2' orRes $end
$var wire 1 3' s0 $end
$var wire 1 4' s0inv $end
$var wire 1 5' s1 $end
$var wire 1 6' s1inv $end
$var wire 1 7' s2 $end
$var wire 1 8' s2inv $end
$var wire 1 9' xorRes $end
$var wire 1 :' carryOut $end
$var wire 1 ;' addSub $end
$scope module adder $end
$var wire 1 <' AandB $end
$var wire 1 =' BxorSub $end
$var wire 1 #' a $end
$var wire 1 %' b $end
$var wire 1 &' carryin $end
$var wire 1 :' carryout $end
$var wire 1 & isSubtract $end
$var wire 1 ;' res $end
$var wire 1 >' xAorB $end
$var wire 1 ?' xAorBandCin $end
$upscope $end
$upscope $end
$upscope $end
$scope begin genblk1[20] $end
$scope module aluBitSlice $end
$var wire 1 @' a $end
$var wire 1 A' andRes $end
$var wire 1 B' b $end
$var wire 1 C' carryIn $end
$var wire 1 D' initialResult $end
$var wire 1 E' isAdd $end
$var wire 1 F' isAnd $end
$var wire 1 G' isNand $end
$var wire 1 H' isNor $end
$var wire 1 I' isOr $end
$var wire 1 J' isSLT $end
$var wire 1 K' isSub $end
$var wire 1 & isSubtract $end
$var wire 1 L' isXor $end
$var wire 1 M' nandRes $end
$var wire 1 N' norRes $end
$var wire 1 O' orRes $end
$var wire 1 P' s0 $end
$var wire 1 Q' s0inv $end
$var wire 1 R' s1 $end
$var wire 1 S' s1inv $end
$var wire 1 T' s2 $end
$var wire 1 U' s2inv $end
$var wire 1 V' xorRes $end
$var wire 1 W' carryOut $end
$var wire 1 X' addSub $end
$scope module adder $end
$var wire 1 Y' AandB $end
$var wire 1 Z' BxorSub $end
$var wire 1 @' a $end
$var wire 1 B' b $end
$var wire 1 C' carryin $end
$var wire 1 W' carryout $end
$var wire 1 & isSubtract $end
$var wire 1 X' res $end
$var wire 1 [' xAorB $end
$var wire 1 \' xAorBandCin $end
$upscope $end
$upscope $end
$upscope $end
$scope begin genblk1[21] $end
$scope module aluBitSlice $end
$var wire 1 ]' a $end
$var wire 1 ^' andRes $end
$var wire 1 _' b $end
$var wire 1 `' carryIn $end
$var wire 1 a' initialResult $end
$var wire 1 b' isAdd $end
$var wire 1 c' isAnd $end
$var wire 1 d' isNand $end
$var wire 1 e' isNor $end
$var wire 1 f' isOr $end
$var wire 1 g' isSLT $end
$var wire 1 h' isSub $end
$var wire 1 & isSubtract $end
$var wire 1 i' isXor $end
$var wire 1 j' nandRes $end
$var wire 1 k' norRes $end
$var wire 1 l' orRes $end
$var wire 1 m' s0 $end
$var wire 1 n' s0inv $end
$var wire 1 o' s1 $end
$var wire 1 p' s1inv $end
$var wire 1 q' s2 $end
$var wire 1 r' s2inv $end
$var wire 1 s' xorRes $end
$var wire 1 t' carryOut $end
$var wire 1 u' addSub $end
$scope module adder $end
$var wire 1 v' AandB $end
$var wire 1 w' BxorSub $end
$var wire 1 ]' a $end
$var wire 1 _' b $end
$var wire 1 `' carryin $end
$var wire 1 t' carryout $end
$var wire 1 & isSubtract $end
$var wire 1 u' res $end
$var wire 1 x' xAorB $end
$var wire 1 y' xAorBandCin $end
$upscope $end
$upscope $end
$upscope $end
$scope begin genblk1[22] $end
$scope module aluBitSlice $end
$var wire 1 z' a $end
$var wire 1 {' andRes $end
$var wire 1 |' b $end
$var wire 1 }' carryIn $end
$var wire 1 ~' initialResult $end
$var wire 1 !( isAdd $end
$var wire 1 "( isAnd $end
$var wire 1 #( isNand $end
$var wire 1 $( isNor $end
$var wire 1 %( isOr $end
$var wire 1 &( isSLT $end
$var wire 1 '( isSub $end
$var wire 1 & isSubtract $end
$var wire 1 (( isXor $end
$var wire 1 )( nandRes $end
$var wire 1 *( norRes $end
$var wire 1 +( orRes $end
$var wire 1 ,( s0 $end
$var wire 1 -( s0inv $end
$var wire 1 .( s1 $end
$var wire 1 /( s1inv $end
$var wire 1 0( s2 $end
$var wire 1 1( s2inv $end
$var wire 1 2( xorRes $end
$var wire 1 3( carryOut $end
$var wire 1 4( addSub $end
$scope module adder $end
$var wire 1 5( AandB $end
$var wire 1 6( BxorSub $end
$var wire 1 z' a $end
$var wire 1 |' b $end
$var wire 1 }' carryin $end
$var wire 1 3( carryout $end
$var wire 1 & isSubtract $end
$var wire 1 4( res $end
$var wire 1 7( xAorB $end
$var wire 1 8( xAorBandCin $end
$upscope $end
$upscope $end
$upscope $end
$scope begin genblk1[23] $end
$scope module aluBitSlice $end
$var wire 1 9( a $end
$var wire 1 :( andRes $end
$var wire 1 ;( b $end
$var wire 1 <( carryIn $end
$var wire 1 =( initialResult $end
$var wire 1 >( isAdd $end
$var wire 1 ?( isAnd $end
$var wire 1 @( isNand $end
$var wire 1 A( isNor $end
$var wire 1 B( isOr $end
$var wire 1 C( isSLT $end
$var wire 1 D( isSub $end
$var wire 1 & isSubtract $end
$var wire 1 E( isXor $end
$var wire 1 F( nandRes $end
$var wire 1 G( norRes $end
$var wire 1 H( orRes $end
$var wire 1 I( s0 $end
$var wire 1 J( s0inv $end
$var wire 1 K( s1 $end
$var wire 1 L( s1inv $end
$var wire 1 M( s2 $end
$var wire 1 N( s2inv $end
$var wire 1 O( xorRes $end
$var wire 1 P( carryOut $end
$var wire 1 Q( addSub $end
$scope module adder $end
$var wire 1 R( AandB $end
$var wire 1 S( BxorSub $end
$var wire 1 9( a $end
$var wire 1 ;( b $end
$var wire 1 <( carryin $end
$var wire 1 P( carryout $end
$var wire 1 & isSubtract $end
$var wire 1 Q( res $end
$var wire 1 T( xAorB $end
$var wire 1 U( xAorBandCin $end
$upscope $end
$upscope $end
$upscope $end
$scope begin genblk1[24] $end
$scope module aluBitSlice $end
$var wire 1 V( a $end
$var wire 1 W( andRes $end
$var wire 1 X( b $end
$var wire 1 Y( carryIn $end
$var wire 1 Z( initialResult $end
$var wire 1 [( isAdd $end
$var wire 1 \( isAnd $end
$var wire 1 ]( isNand $end
$var wire 1 ^( isNor $end
$var wire 1 _( isOr $end
$var wire 1 `( isSLT $end
$var wire 1 a( isSub $end
$var wire 1 & isSubtract $end
$var wire 1 b( isXor $end
$var wire 1 c( nandRes $end
$var wire 1 d( norRes $end
$var wire 1 e( orRes $end
$var wire 1 f( s0 $end
$var wire 1 g( s0inv $end
$var wire 1 h( s1 $end
$var wire 1 i( s1inv $end
$var wire 1 j( s2 $end
$var wire 1 k( s2inv $end
$var wire 1 l( xorRes $end
$var wire 1 m( carryOut $end
$var wire 1 n( addSub $end
$scope module adder $end
$var wire 1 o( AandB $end
$var wire 1 p( BxorSub $end
$var wire 1 V( a $end
$var wire 1 X( b $end
$var wire 1 Y( carryin $end
$var wire 1 m( carryout $end
$var wire 1 & isSubtract $end
$var wire 1 n( res $end
$var wire 1 q( xAorB $end
$var wire 1 r( xAorBandCin $end
$upscope $end
$upscope $end
$upscope $end
$scope begin genblk1[25] $end
$scope module aluBitSlice $end
$var wire 1 s( a $end
$var wire 1 t( andRes $end
$var wire 1 u( b $end
$var wire 1 v( carryIn $end
$var wire 1 w( initialResult $end
$var wire 1 x( isAdd $end
$var wire 1 y( isAnd $end
$var wire 1 z( isNand $end
$var wire 1 {( isNor $end
$var wire 1 |( isOr $end
$var wire 1 }( isSLT $end
$var wire 1 ~( isSub $end
$var wire 1 & isSubtract $end
$var wire 1 !) isXor $end
$var wire 1 ") nandRes $end
$var wire 1 #) norRes $end
$var wire 1 $) orRes $end
$var wire 1 %) s0 $end
$var wire 1 &) s0inv $end
$var wire 1 ') s1 $end
$var wire 1 () s1inv $end
$var wire 1 )) s2 $end
$var wire 1 *) s2inv $end
$var wire 1 +) xorRes $end
$var wire 1 ,) carryOut $end
$var wire 1 -) addSub $end
$scope module adder $end
$var wire 1 .) AandB $end
$var wire 1 /) BxorSub $end
$var wire 1 s( a $end
$var wire 1 u( b $end
$var wire 1 v( carryin $end
$var wire 1 ,) carryout $end
$var wire 1 & isSubtract $end
$var wire 1 -) res $end
$var wire 1 0) xAorB $end
$var wire 1 1) xAorBandCin $end
$upscope $end
$upscope $end
$upscope $end
$scope begin genblk1[26] $end
$scope module aluBitSlice $end
$var wire 1 2) a $end
$var wire 1 3) andRes $end
$var wire 1 4) b $end
$var wire 1 5) carryIn $end
$var wire 1 6) initialResult $end
$var wire 1 7) isAdd $end
$var wire 1 8) isAnd $end
$var wire 1 9) isNand $end
$var wire 1 :) isNor $end
$var wire 1 ;) isOr $end
$var wire 1 <) isSLT $end
$var wire 1 =) isSub $end
$var wire 1 & isSubtract $end
$var wire 1 >) isXor $end
$var wire 1 ?) nandRes $end
$var wire 1 @) norRes $end
$var wire 1 A) orRes $end
$var wire 1 B) s0 $end
$var wire 1 C) s0inv $end
$var wire 1 D) s1 $end
$var wire 1 E) s1inv $end
$var wire 1 F) s2 $end
$var wire 1 G) s2inv $end
$var wire 1 H) xorRes $end
$var wire 1 I) carryOut $end
$var wire 1 J) addSub $end
$scope module adder $end
$var wire 1 K) AandB $end
$var wire 1 L) BxorSub $end
$var wire 1 2) a $end
$var wire 1 4) b $end
$var wire 1 5) carryin $end
$var wire 1 I) carryout $end
$var wire 1 & isSubtract $end
$var wire 1 J) res $end
$var wire 1 M) xAorB $end
$var wire 1 N) xAorBandCin $end
$upscope $end
$upscope $end
$upscope $end
$scope begin genblk1[27] $end
$scope module aluBitSlice $end
$var wire 1 O) a $end
$var wire 1 P) andRes $end
$var wire 1 Q) b $end
$var wire 1 R) carryIn $end
$var wire 1 S) initialResult $end
$var wire 1 T) isAdd $end
$var wire 1 U) isAnd $end
$var wire 1 V) isNand $end
$var wire 1 W) isNor $end
$var wire 1 X) isOr $end
$var wire 1 Y) isSLT $end
$var wire 1 Z) isSub $end
$var wire 1 & isSubtract $end
$var wire 1 [) isXor $end
$var wire 1 \) nandRes $end
$var wire 1 ]) norRes $end
$var wire 1 ^) orRes $end
$var wire 1 _) s0 $end
$var wire 1 `) s0inv $end
$var wire 1 a) s1 $end
$var wire 1 b) s1inv $end
$var wire 1 c) s2 $end
$var wire 1 d) s2inv $end
$var wire 1 e) xorRes $end
$var wire 1 f) carryOut $end
$var wire 1 g) addSub $end
$scope module adder $end
$var wire 1 h) AandB $end
$var wire 1 i) BxorSub $end
$var wire 1 O) a $end
$var wire 1 Q) b $end
$var wire 1 R) carryin $end
$var wire 1 f) carryout $end
$var wire 1 & isSubtract $end
$var wire 1 g) res $end
$var wire 1 j) xAorB $end
$var wire 1 k) xAorBandCin $end
$upscope $end
$upscope $end
$upscope $end
$scope begin genblk1[28] $end
$scope module aluBitSlice $end
$var wire 1 l) a $end
$var wire 1 m) andRes $end
$var wire 1 n) b $end
$var wire 1 o) carryIn $end
$var wire 1 p) initialResult $end
$var wire 1 q) isAdd $end
$var wire 1 r) isAnd $end
$var wire 1 s) isNand $end
$var wire 1 t) isNor $end
$var wire 1 u) isOr $end
$var wire 1 v) isSLT $end
$var wire 1 w) isSub $end
$var wire 1 & isSubtract $end
$var wire 1 x) isXor $end
$var wire 1 y) nandRes $end
$var wire 1 z) norRes $end
$var wire 1 {) orRes $end
$var wire 1 |) s0 $end
$var wire 1 }) s0inv $end
$var wire 1 ~) s1 $end
$var wire 1 !* s1inv $end
$var wire 1 "* s2 $end
$var wire 1 #* s2inv $end
$var wire 1 $* xorRes $end
$var wire 1 %* carryOut $end
$var wire 1 &* addSub $end
$scope module adder $end
$var wire 1 '* AandB $end
$var wire 1 (* BxorSub $end
$var wire 1 l) a $end
$var wire 1 n) b $end
$var wire 1 o) carryin $end
$var wire 1 %* carryout $end
$var wire 1 & isSubtract $end
$var wire 1 &* res $end
$var wire 1 )* xAorB $end
$var wire 1 ** xAorBandCin $end
$upscope $end
$upscope $end
$upscope $end
$scope begin genblk1[29] $end
$scope module aluBitSlice $end
$var wire 1 +* a $end
$var wire 1 ,* andRes $end
$var wire 1 -* b $end
$var wire 1 .* carryIn $end
$var wire 1 /* initialResult $end
$var wire 1 0* isAdd $end
$var wire 1 1* isAnd $end
$var wire 1 2* isNand $end
$var wire 1 3* isNor $end
$var wire 1 4* isOr $end
$var wire 1 5* isSLT $end
$var wire 1 6* isSub $end
$var wire 1 & isSubtract $end
$var wire 1 7* isXor $end
$var wire 1 8* nandRes $end
$var wire 1 9* norRes $end
$var wire 1 :* orRes $end
$var wire 1 ;* s0 $end
$var wire 1 <* s0inv $end
$var wire 1 =* s1 $end
$var wire 1 >* s1inv $end
$var wire 1 ?* s2 $end
$var wire 1 @* s2inv $end
$var wire 1 A* xorRes $end
$var wire 1 B* carryOut $end
$var wire 1 C* addSub $end
$scope module adder $end
$var wire 1 D* AandB $end
$var wire 1 E* BxorSub $end
$var wire 1 +* a $end
$var wire 1 -* b $end
$var wire 1 .* carryin $end
$var wire 1 B* carryout $end
$var wire 1 & isSubtract $end
$var wire 1 C* res $end
$var wire 1 F* xAorB $end
$var wire 1 G* xAorBandCin $end
$upscope $end
$upscope $end
$upscope $end
$scope begin genblk1[30] $end
$scope module aluBitSlice $end
$var wire 1 H* a $end
$var wire 1 I* andRes $end
$var wire 1 J* b $end
$var wire 1 K* carryIn $end
$var wire 1 L* initialResult $end
$var wire 1 M* isAdd $end
$var wire 1 N* isAnd $end
$var wire 1 O* isNand $end
$var wire 1 P* isNor $end
$var wire 1 Q* isOr $end
$var wire 1 R* isSLT $end
$var wire 1 S* isSub $end
$var wire 1 & isSubtract $end
$var wire 1 T* isXor $end
$var wire 1 U* nandRes $end
$var wire 1 V* norRes $end
$var wire 1 W* orRes $end
$var wire 1 X* s0 $end
$var wire 1 Y* s0inv $end
$var wire 1 Z* s1 $end
$var wire 1 [* s1inv $end
$var wire 1 \* s2 $end
$var wire 1 ]* s2inv $end
$var wire 1 ^* xorRes $end
$var wire 1 _* carryOut $end
$var wire 1 `* addSub $end
$scope module adder $end
$var wire 1 a* AandB $end
$var wire 1 b* BxorSub $end
$var wire 1 H* a $end
$var wire 1 J* b $end
$var wire 1 K* carryin $end
$var wire 1 _* carryout $end
$var wire 1 & isSubtract $end
$var wire 1 `* res $end
$var wire 1 c* xAorB $end
$var wire 1 d* xAorBandCin $end
$upscope $end
$upscope $end
$upscope $end
$scope begin genblk1[31] $end
$scope module aluBitSlice $end
$var wire 1 e* a $end
$var wire 1 f* andRes $end
$var wire 1 g* b $end
$var wire 1 h* carryIn $end
$var wire 1 i* initialResult $end
$var wire 1 j* isAdd $end
$var wire 1 k* isAnd $end
$var wire 1 l* isNand $end
$var wire 1 m* isNor $end
$var wire 1 n* isOr $end
$var wire 1 o* isSLT $end
$var wire 1 p* isSub $end
$var wire 1 & isSubtract $end
$var wire 1 q* isXor $end
$var wire 1 r* nandRes $end
$var wire 1 s* norRes $end
$var wire 1 t* orRes $end
$var wire 1 u* s0 $end
$var wire 1 v* s0inv $end
$var wire 1 w* s1 $end
$var wire 1 x* s1inv $end
$var wire 1 y* s2 $end
$var wire 1 z* s2inv $end
$var wire 1 {* xorRes $end
$var wire 1 |* carryOut $end
$var wire 1 }* addSub $end
$scope module adder $end
$var wire 1 ~* AandB $end
$var wire 1 !+ BxorSub $end
$var wire 1 e* a $end
$var wire 1 g* b $end
$var wire 1 h* carryin $end
$var wire 1 |* carryout $end
$var wire 1 & isSubtract $end
$var wire 1 }* res $end
$var wire 1 "+ xAorB $end
$var wire 1 #+ xAorBandCin $end
$upscope $end
$upscope $end
$upscope $end
$scope begin genblk2[1] $end
$upscope $end
$scope begin genblk2[2] $end
$upscope $end
$scope begin genblk2[3] $end
$upscope $end
$scope begin genblk2[4] $end
$upscope $end
$scope begin genblk2[5] $end
$upscope $end
$scope begin genblk2[6] $end
$upscope $end
$scope begin genblk2[7] $end
$upscope $end
$scope begin genblk2[8] $end
$upscope $end
$scope begin genblk2[9] $end
$upscope $end
$scope begin genblk2[10] $end
$upscope $end
$scope begin genblk2[11] $end
$upscope $end
$scope begin genblk2[12] $end
$upscope $end
$scope begin genblk2[13] $end
$upscope $end
$scope begin genblk2[14] $end
$upscope $end
$scope begin genblk2[15] $end
$upscope $end
$scope begin genblk2[16] $end
$upscope $end
$scope begin genblk2[17] $end
$upscope $end
$scope begin genblk2[18] $end
$upscope $end
$scope begin genblk2[19] $end
$upscope $end
$scope begin genblk2[20] $end
$upscope $end
$scope begin genblk2[21] $end
$upscope $end
$scope begin genblk2[22] $end
$upscope $end
$scope begin genblk2[23] $end
$upscope $end
$scope begin genblk2[24] $end
$upscope $end
$scope begin genblk2[25] $end
$upscope $end
$scope begin genblk2[26] $end
$upscope $end
$scope begin genblk2[27] $end
$upscope $end
$scope begin genblk2[28] $end
$upscope $end
$scope begin genblk2[29] $end
$upscope $end
$scope begin genblk2[30] $end
$upscope $end
$scope begin genblk2[31] $end
$upscope $end
$scope module overflowCalc $end
$var wire 1 $+ BxorSub $end
$var wire 1 %+ a $end
$var wire 1 &+ aAndB $end
$var wire 1 '+ b $end
$var wire 1 (+ negToPos $end
$var wire 1 )+ notA $end
$var wire 1 *+ notB $end
$var wire 1 ++ notS $end
$var wire 1 ,+ notaAndNotb $end
$var wire 1 - overflow $end
$var wire 1 -+ posToNeg $end
$var wire 1 .+ s $end
$var wire 1 & sub $end
$upscope $end
$scope module zeroCalc $end
$var wire 32 /+ a [31:0] $end
$var wire 1 + out $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
bx /+
x.+
x-+
x,+
x++
x*+
x)+
x(+
0'+
x&+
0%+
x$+
x#+
x"+
x!+
x~*
x}*
x|*
x{*
xz*
0y*
xx*
1w*
xv*
1u*
xt*
xs*
xr*
xq*
xp*
xo*
xn*
xm*
xl*
xk*
xj*
xi*
xh*
0g*
xf*
0e*
xd*
xc*
xb*
xa*
x`*
x_*
x^*
x]*
0\*
x[*
1Z*
xY*
1X*
xW*
xV*
xU*
xT*
xS*
xR*
xQ*
xP*
xO*
xN*
xM*
xL*
xK*
0J*
xI*
0H*
xG*
xF*
xE*
xD*
xC*
xB*
xA*
x@*
0?*
x>*
1=*
x<*
1;*
x:*
x9*
x8*
x7*
x6*
x5*
x4*
x3*
x2*
x1*
x0*
x/*
x.*
0-*
x,*
0+*
x**
x)*
x(*
x'*
x&*
x%*
x$*
x#*
0"*
x!*
1~)
x})
1|)
x{)
xz)
xy)
xx)
xw)
xv)
xu)
xt)
xs)
xr)
xq)
xp)
xo)
0n)
xm)
0l)
xk)
xj)
xi)
xh)
xg)
xf)
xe)
xd)
0c)
xb)
1a)
x`)
1_)
x^)
x])
x\)
x[)
xZ)
xY)
xX)
xW)
xV)
xU)
xT)
xS)
xR)
0Q)
xP)
0O)
xN)
xM)
xL)
xK)
xJ)
xI)
xH)
xG)
0F)
xE)
1D)
xC)
1B)
xA)
x@)
x?)
x>)
x=)
x<)
x;)
x:)
x9)
x8)
x7)
x6)
x5)
04)
x3)
02)
x1)
x0)
x/)
x.)
x-)
x,)
x+)
x*)
0))
x()
1')
x&)
1%)
x$)
x#)
x")
x!)
x~(
x}(
x|(
x{(
xz(
xy(
xx(
xw(
xv(
0u(
xt(
0s(
xr(
xq(
xp(
xo(
xn(
xm(
xl(
xk(
0j(
xi(
1h(
xg(
1f(
xe(
xd(
xc(
xb(
xa(
x`(
x_(
x^(
x](
x\(
x[(
xZ(
xY(
0X(
xW(
0V(
xU(
xT(
xS(
xR(
xQ(
xP(
xO(
xN(
0M(
xL(
1K(
xJ(
1I(
xH(
xG(
xF(
xE(
xD(
xC(
xB(
xA(
x@(
x?(
x>(
x=(
x<(
0;(
x:(
09(
x8(
x7(
x6(
x5(
x4(
x3(
x2(
x1(
00(
x/(
1.(
x-(
1,(
x+(
x*(
x)(
x((
x'(
x&(
x%(
x$(
x#(
x"(
x!(
x~'
x}'
0|'
x{'
0z'
xy'
xx'
xw'
xv'
xu'
xt'
xs'
xr'
0q'
xp'
1o'
xn'
1m'
xl'
xk'
xj'
xi'
xh'
xg'
xf'
xe'
xd'
xc'
xb'
xa'
x`'
0_'
x^'
0]'
x\'
x['
xZ'
xY'
xX'
xW'
xV'
xU'
0T'
xS'
1R'
xQ'
1P'
xO'
xN'
xM'
xL'
xK'
xJ'
xI'
xH'
xG'
xF'
xE'
xD'
xC'
0B'
xA'
0@'
x?'
x>'
x='
x<'
x;'
x:'
x9'
x8'
07'
x6'
15'
x4'
13'
x2'
x1'
x0'
x/'
x.'
x-'
x,'
x+'
x*'
x)'
x('
x''
x&'
0%'
x$'
0#'
x"'
x!'
x~&
x}&
x|&
x{&
xz&
xy&
0x&
xw&
1v&
xu&
1t&
xs&
xr&
xq&
xp&
xo&
xn&
xm&
xl&
xk&
xj&
xi&
xh&
xg&
0f&
xe&
0d&
xc&
xb&
xa&
x`&
x_&
x^&
x]&
x\&
0[&
xZ&
1Y&
xX&
1W&
xV&
xU&
xT&
xS&
xR&
xQ&
xP&
xO&
xN&
xM&
xL&
xK&
xJ&
0I&
xH&
0G&
xF&
xE&
xD&
xC&
xB&
xA&
x@&
x?&
0>&
x=&
1<&
x;&
1:&
x9&
x8&
x7&
x6&
x5&
x4&
x3&
x2&
x1&
x0&
x/&
x.&
x-&
0,&
x+&
0*&
x)&
x(&
x'&
x&&
x%&
x$&
x#&
x"&
0!&
x~%
1}%
x|%
1{%
xz%
xy%
xx%
xw%
xv%
xu%
xt%
xs%
xr%
xq%
xp%
xo%
xn%
0m%
xl%
0k%
xj%
xi%
xh%
xg%
xf%
xe%
xd%
xc%
0b%
xa%
1`%
x_%
1^%
x]%
x\%
x[%
xZ%
xY%
xX%
xW%
xV%
xU%
xT%
xS%
xR%
xQ%
0P%
xO%
0N%
xM%
xL%
xK%
xJ%
xI%
xH%
xG%
xF%
0E%
xD%
1C%
xB%
1A%
x@%
x?%
x>%
x=%
x<%
x;%
x:%
x9%
x8%
x7%
x6%
x5%
x4%
03%
x2%
01%
x0%
x/%
x.%
x-%
x,%
x+%
x*%
x)%
0(%
x'%
1&%
x%%
1$%
x#%
x"%
x!%
x~$
x}$
x|$
x{$
xz$
xy$
xx$
xw$
xv$
xu$
0t$
xs$
0r$
xq$
xp$
xo$
xn$
xm$
xl$
xk$
xj$
0i$
xh$
1g$
xf$
1e$
xd$
xc$
xb$
xa$
x`$
x_$
x^$
x]$
x\$
x[$
xZ$
xY$
xX$
0W$
xV$
0U$
xT$
xS$
xR$
xQ$
xP$
xO$
xN$
xM$
0L$
xK$
1J$
xI$
1H$
xG$
xF$
xE$
xD$
xC$
xB$
xA$
x@$
x?$
x>$
x=$
x<$
x;$
0:$
x9$
08$
x7$
x6$
x5$
x4$
x3$
x2$
x1$
x0$
0/$
x.$
1-$
x,$
1+$
x*$
x)$
x($
x'$
x&$
x%$
x$$
x#$
x"$
x!$
x~#
x}#
x|#
0{#
xz#
0y#
xx#
xw#
xv#
xu#
xt#
xs#
xr#
xq#
0p#
xo#
1n#
xm#
1l#
xk#
xj#
xi#
xh#
xg#
xf#
xe#
xd#
xc#
xb#
xa#
x`#
x_#
0^#
x]#
0\#
x[#
xZ#
xY#
xX#
xW#
xV#
xU#
xT#
0S#
xR#
1Q#
xP#
1O#
xN#
xM#
xL#
xK#
xJ#
xI#
xH#
xG#
xF#
xE#
xD#
xC#
xB#
0A#
x@#
0?#
x>#
x=#
x<#
x;#
x:#
x9#
x8#
x7#
06#
x5#
14#
x3#
12#
x1#
x0#
x/#
x.#
x-#
x,#
x+#
x*#
x)#
x(#
x'#
x&#
x%#
0$#
x##
0"#
x!#
x~"
x}"
x|"
x{"
xz"
xy"
xx"
0w"
xv"
1u"
xt"
1s"
xr"
xq"
xp"
xo"
xn"
xm"
xl"
xk"
xj"
xi"
xh"
xg"
xf"
0e"
xd"
0c"
xb"
xa"
x`"
x_"
x^"
x]"
x\"
x["
0Z"
xY"
1X"
xW"
1V"
xU"
xT"
xS"
xR"
xQ"
xP"
xO"
xN"
xM"
xL"
xK"
xJ"
xI"
0H"
xG"
0F"
xE"
xD"
xC"
xB"
xA"
x@"
x?"
x>"
0="
x<"
1;"
x:"
19"
x8"
x7"
x6"
x5"
x4"
x3"
x2"
x1"
x0"
x/"
x."
x-"
x,"
0+"
x*"
0)"
x("
x'"
x&"
x%"
x$"
x#"
x""
x!"
0~
x}
1|
x{
1z
xy
xx
xw
xv
xu
xt
xs
xr
xq
xp
xo
xn
xm
0l
xk
0j
xi
xh
xg
xf
xe
xd
xc
xb
0a
x`
1_
x^
1]
x\
x[
xZ
xY
xX
xW
xV
xU
xT
xS
xR
xQ
xP
0O
xN
0M
xL
xK
xJ
xI
xH
xG
xF
xE
0D
xC
1B
xA
1@
x?
x>
x=
x<
x;
x:
x9
x8
x7
x6
x5
x4
x3
12
x1
00
bx /
bx .
x-
bx ,
x+
x*
x)
b1 (
b0 '
x&
x%
x$
b11 #
x"
x!
$end
#10000
1)+
0A
0C
1E
0^
0`
1b
0{
0}
1!"
0:"
0<"
1>"
0W"
0Y"
1["
0t"
0v"
1x"
03#
05#
17#
0P#
0R#
1T#
0m#
0o#
1q#
0,$
0.$
10$
0I$
0K$
1M$
0f$
0h$
1j$
0%%
0'%
1)%
0B%
0D%
1F%
0_%
0a%
1c%
0|%
0~%
1"&
0;&
0=&
1?&
0X&
0Z&
1\&
0u&
0w&
1y&
04'
06'
18'
0Q'
0S'
1U'
0n'
0p'
1r'
0-(
0/(
11(
0J(
0L(
1N(
0g(
0i(
1k(
0&)
0()
1*)
0C)
0E)
1G)
0`)
0b)
1d)
0})
0!*
1#*
0<*
0>*
1@*
0Y*
0[*
1]*
0v*
0x*
1z*
1*
#20000
1=
0>
1Z
1[
1w
1x
16"
17"
1S"
1T"
1p"
1q"
1/#
10#
1L#
1M#
1i#
1j#
1($
1)$
1E$
1F$
1b$
1c$
1!%
1"%
1>%
1?%
1[%
1\%
1x%
1y%
17&
18&
1T&
1U&
1q&
1r&
10'
11'
1M'
1N'
1j'
1k'
1)(
1*(
1F(
1G(
1c(
1d(
1")
1#)
1?)
1@)
1\)
1])
1y)
1z)
18*
19*
1U*
1V*
1r*
1s*
#40000
01
1?
1F
0I
0N
0\
0c
0f
0k
0y
0""
0%"
0*"
08"
0?"
0B"
0G"
0U"
0\"
0_"
0d"
0r"
0y"
0|"
0##
01#
08#
0;#
0@#
0N#
0U#
0X#
0]#
0k#
0r#
0u#
0z#
0*$
01$
04$
09$
0G$
0N$
0Q$
0V$
0d$
0k$
0n$
0s$
0#%
0*%
0-%
02%
0@%
0G%
0J%
0O%
0]%
0d%
0g%
0l%
0z%
0#&
0&&
0+&
09&
0@&
0C&
0H&
0V&
0]&
0`&
0e&
0s&
0z&
0}&
0$'
02'
09'
0<'
0A'
0O'
0V'
0Y'
0^'
0l'
0s'
0v'
0{'
0+(
02(
05(
0:(
0H(
0O(
0R(
0W(
0e(
0l(
0o(
0t(
0$)
0+)
0.)
03)
0A)
0H)
0K)
0P)
0^)
0e)
0h)
0m)
0{)
0$*
0'*
0,*
0:*
0A*
0D*
0I*
0W*
0^*
0a*
0f*
0t*
0{*
0~*
0&+
1&
#70000
1$
#80000
13
0%
0(+
bx1 /
0J
1g
1&"
1C"
1`"
1}"
1<#
1Y#
1v#
15$
1R$
1o$
1.%
1K%
1h%
1'&
1D&
1a&
1~&
1='
1Z'
1w'
16(
1S(
1p(
1/)
1L)
1i)
1(*
1E*
1b*
1!+
1$+
06
07
08
09
0S
0T
0U
0V
0p
0q
0r
0s
0/"
00"
01"
02"
0L"
0M"
0N"
0O"
0i"
0j"
0k"
0l"
0(#
0)#
0*#
0+#
0E#
0F#
0G#
0H#
0b#
0c#
0d#
0e#
0!$
0"$
0#$
0$$
0>$
0?$
0@$
0A$
0[$
0\$
0]$
0^$
0x$
0y$
0z$
0{$
07%
08%
09%
0:%
0T%
0U%
0V%
0W%
0q%
0r%
0s%
0t%
00&
01&
02&
03&
0M&
0N&
0O&
0P&
0j&
0k&
0l&
0m&
0)'
0*'
0+'
0,'
0F'
0G'
0H'
0I'
0c'
0d'
0e'
0f'
0"(
0#(
0$(
0%(
0?(
0@(
0A(
0B(
0\(
0](
0^(
0_(
0y(
0z(
0{(
0|(
08)
09)
0:)
0;)
0U)
0V)
0W)
0X)
0r)
0s)
0t)
0u)
01*
02*
03*
04*
0N*
0O*
0P*
0Q*
0k*
0l*
0m*
0n*
#90000
0*+
05
0;
0<
0R
0X
0Y
0o
0u
0v
0."
04"
05"
0K"
0Q"
0R"
0h"
0n"
0o"
0'#
0-#
0.#
0D#
0J#
0K#
0a#
0g#
0h#
0~#
0&$
0'$
0=$
0C$
0D$
0Z$
0`$
0a$
0w$
0}$
0~$
06%
0<%
0=%
0S%
0Y%
0Z%
0p%
0v%
0w%
0/&
05&
06&
0L&
0R&
0S&
0i&
0o&
0p&
0('
0.'
0/'
0E'
0K'
0L'
0b'
0h'
0i'
0!(
0'(
0((
0>(
0D(
0E(
0[(
0a(
0b(
0x(
0~(
0!)
07)
0=)
0>)
0T)
0Z)
0[)
0q)
0w)
0x)
00*
06*
07*
0M*
0S*
0T*
0j*
0p*
0q*
#120000
b0x ,
b0x /+
0K
1h
1'"
1D"
1a"
1~"
1=#
1Z#
1w#
16$
1S$
1p$
1/%
1L%
1i%
1(&
1E&
1b&
1!'
1>'
1['
1x'
17(
1T(
1q(
10)
1M)
1j)
1)*
1F*
1c*
1"+
#130000
0,+
#160000
1H
0L
#170000
0-+
#200000
0P
bx01 /
0G
#210000
0-
#220000
1)
#240000
1e
0i
1:
#280000
0m
bx001 /
0d
#320000
1$"
0("
1W
#360000
0,"
bx0001 /
0#"
#400000
1A"
0E"
1t
bx1 .
14
#440000
0I"
b1 ,
b1 /+
bx00001 /
0@"
#480000
1^"
0b"
13"
bx11 .
1Q
#520000
0f"
bx000001 /
0]"
#560000
1{"
0!#
1P"
bx111 .
1n
#600000
0%#
bx0000001 /
0z"
#640000
1:#
0>#
1m"
bx1111 .
1-"
#680000
0B#
bx00000001 /
09#
#720000
1W#
0[#
1,#
bx11111 .
1J"
#760000
0_#
bx000000001 /
0V#
0+
#800000
1t#
0x#
1I#
bx111111 .
1g"
#840000
0|#
bx0000000001 /
0s#
#880000
13$
07$
1f#
bx1111111 .
1&#
#920000
0;$
bx00000000001 /
02$
#960000
1P$
0T$
1%$
bx11111111 .
1C#
#1000000
0X$
bx000000000001 /
0O$
#1040000
1m$
0q$
1B$
bx111111111 .
1`#
#1080000
0u$
bx0000000000001 /
0l$
#1120000
1,%
00%
1_$
bx1111111111 .
1}#
#1160000
04%
bx00000000000001 /
0+%
#1200000
1I%
0M%
1|$
bx11111111111 .
1<$
#1240000
0Q%
bx000000000000001 /
0H%
#1280000
1f%
0j%
1;%
bx111111111111 .
1Y$
#1320000
0n%
bx0000000000000001 /
0e%
#1360000
1%&
0)&
1X%
bx1111111111111 .
1v$
#1400000
0-&
bx00000000000000001 /
0$&
#1440000
1B&
0F&
1u%
bx11111111111111 .
15%
#1480000
0J&
bx000000000000000001 /
0A&
#1520000
1_&
0c&
14&
bx111111111111111 .
1R%
#1560000
0g&
bx0000000000000000001 /
0^&
#1600000
1|&
0"'
1Q&
bx1111111111111111 .
1o%
#1640000
0&'
bx00000000000000000001 /
0{&
#1680000
1;'
0?'
1n&
bx11111111111111111 .
1.&
#1720000
0C'
bx000000000000000000001 /
0:'
#1760000
1X'
0\'
1-'
bx111111111111111111 .
1K&
#1800000
0`'
bx0000000000000000000001 /
0W'
#1840000
1u'
0y'
1J'
bx1111111111111111111 .
1h&
#1880000
0}'
bx00000000000000000000001 /
0t'
#1920000
14(
08(
1g'
bx11111111111111111111 .
1''
#1960000
0<(
bx000000000000000000000001 /
03(
#2000000
1Q(
0U(
1&(
bx111111111111111111111 .
1D'
#2040000
0Y(
bx0000000000000000000000001 /
0P(
#2080000
1n(
0r(
1C(
bx1111111111111111111111 .
1a'
#2120000
0v(
bx00000000000000000000000001 /
0m(
#2160000
1-)
01)
1`(
bx11111111111111111111111 .
1~'
#2200000
05)
bx000000000000000000000000001 /
0,)
#2240000
1J)
0N)
1}(
bx111111111111111111111111 .
1=(
#2280000
0R)
bx0000000000000000000000000001 /
0I)
#2320000
1g)
0k)
1<)
bx1111111111111111111111111 .
1Z(
#2360000
0o)
bx00000000000000000000000000001 /
0f)
#2400000
1&*
0**
1Y)
bx11111111111111111111111111 .
1w(
#2440000
0.*
bx000000000000000000000000000001 /
0%*
#2480000
1C*
0G*
1v)
bx111111111111111111111111111 .
16)
#2520000
0K*
bx0000000000000000000000000000001 /
0B*
#2560000
1`*
0d*
15*
bx1111111111111111111111111111 .
1S)
#2600000
0h*
bx00000000000000000000000000000001 /
0_*
#2640000
1}*
0#+
1R*
bx11111111111111111111111111111 .
1p)
#2680000
b1 /
0|*
#2720000
0"
1o*
bx111111111111111111111111111111 .
1/*
#2800000
bx1111111111111111111111111111111 .
1L*
#2880000
1.+
b11111111111111111111111111111111 .
1i*
#2890000
0++
#2940000
1!
#4000000
02
10
b0 (
b1 '
#4040000
1J
1K
#4080000
0K
1I
0H
1L
#4120000
1P
1H
0L
b11 /
1G
#4160000
0e
1i
#4200000
1m
b111 /
1d
#4240000
0$"
1("
0W
#4280000
1,"
b1111 /
1#"
#4320000
0A"
1E"
0t
#4360000
1I"
b11111 /
1@"
#4400000
0^"
1b"
03"
b11111111111111111111111111111101 .
0Q
#4440000
1f"
b111111 /
1]"
#4480000
0{"
1!#
0P"
b11111111111111111111111111111001 .
0n
#4520000
1%#
b1111111 /
1z"
#4560000
0:#
1>#
0m"
b11111111111111111111111111110001 .
0-"
#4600000
1B#
b11111111 /
19#
#4640000
0W#
1[#
0,#
b11111111111111111111111111100001 .
0J"
#4680000
1_#
b111111111 /
1V#
#4720000
0t#
1x#
0I#
b11111111111111111111111111000001 .
0g"
#4760000
1|#
b1111111111 /
1s#
#4800000
03$
17$
0f#
b11111111111111111111111110000001 .
0&#
#4840000
1;$
b11111111111 /
12$
#4880000
0P$
1T$
0%$
b11111111111111111111111100000001 .
0C#
#4920000
1X$
b111111111111 /
1O$
#4960000
0m$
1q$
0B$
b11111111111111111111111000000001 .
0`#
#5000000
1u$
b1111111111111 /
1l$
#5040000
0,%
10%
0_$
b11111111111111111111110000000001 .
0}#
#5080000
14%
b11111111111111 /
1+%
#5120000
0I%
1M%
0|$
b11111111111111111111100000000001 .
0<$
#5160000
1Q%
b111111111111111 /
1H%
#5200000
0f%
1j%
0;%
b11111111111111111111000000000001 .
0Y$
#5240000
1n%
b1111111111111111 /
1e%
#5280000
0%&
1)&
0X%
b11111111111111111110000000000001 .
0v$
#5320000
1-&
b11111111111111111 /
1$&
#5360000
0B&
1F&
0u%
b11111111111111111100000000000001 .
05%
#5400000
1J&
b111111111111111111 /
1A&
#5440000
0_&
1c&
04&
b11111111111111111000000000000001 .
0R%
#5480000
1g&
b1111111111111111111 /
1^&
#5520000
0|&
1"'
0Q&
b11111111111111110000000000000001 .
0o%
#5560000
1&'
b11111111111111111111 /
1{&
#5600000
0;'
1?'
0n&
b11111111111111100000000000000001 .
0.&
#5640000
1C'
b111111111111111111111 /
1:'
#5680000
0X'
1\'
0-'
b11111111111111000000000000000001 .
0K&
#5720000
1`'
b1111111111111111111111 /
1W'
#5760000
0u'
1y'
0J'
b11111111111110000000000000000001 .
0h&
#5800000
1}'
b11111111111111111111111 /
1t'
#5840000
04(
18(
0g'
b11111111111100000000000000000001 .
0''
#5880000
1<(
b111111111111111111111111 /
13(
#5920000
0Q(
1U(
0&(
b11111111111000000000000000000001 .
0D'
#5960000
1Y(
b1111111111111111111111111 /
1P(
#6000000
0n(
1r(
0C(
b11111111110000000000000000000001 .
0a'
#6040000
1v(
b11111111111111111111111111 /
1m(
#6080000
0-)
11)
0`(
b11111111100000000000000000000001 .
0~'
#6120000
15)
b111111111111111111111111111 /
1,)
#6160000
0J)
1N)
0}(
b11111111000000000000000000000001 .
0=(
#6200000
1R)
b1111111111111111111111111111 /
1I)
#6240000
0g)
1k)
0<)
b11111110000000000000000000000001 .
0Z(
#6280000
1o)
b11111111111111111111111111111 /
1f)
#6320000
0&*
1**
0Y)
b11111100000000000000000000000001 .
0w(
#6360000
1.*
b111111111111111111111111111111 /
1%*
#6400000
0C*
1G*
0v)
b11111000000000000000000000000001 .
06)
#6440000
1K*
b1111111111111111111111111111111 /
1B*
#6480000
0`*
1d*
05*
b11110000000000000000000000000001 .
0S)
#6520000
1h*
b11111111111111111111111111111111 /
1_*
#6560000
0}*
1#+
0R*
b11100000000000000000000000000001 .
0p)
#6600000
b111111111111111111111111111111111 /
1|*
#6640000
1"
0o*
b11000000000000000000000000000001 .
0/*
#6720000
b10000000000000000000000000000001 .
0L*
#6800000
0.+
b1 .
0i*
#6810000
1++
#6860000
0!
#8000000
